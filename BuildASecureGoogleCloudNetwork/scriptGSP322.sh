#!/bin/bash
# ======================================================================================
#         SCRIPT - LABORATORIO DE SEGURIDAD DE RED
# Estrategia: Transformar una red insegura en un fuerte digital usando el principio
# de privilegio m√≠nimo a trav√©s de reglas de firewall y un basti√≥n.
# ======================================================================================

# --- FASE 0: PREPARACI√ìN DEL CAMPO DE BATALLA ---
# Un buen ingeniero siempre define sus variables primero. Es como ponerle nombre a
# nuestras "pulseras VIP". Esto evita errores de escritura y hace el script m√°s legible.
echo "‚úÖ FASE 0: Definiendo las etiquetas de red (nuestros pases de acceso)..."
export IAP_NETWORK_TAG="grant-ssh-iap-ingress-ql-262"
export HTTP_NETWORK_TAG="grant-http-ingress-ql-262"
export INTERNAL_NETWORK_TAG="grant-ssh-internal-ingress-ql-262"

# Exportamos la zona
export ZONE=""

# ======================================================================================
#             TAREA 1: LA GRAN LIMPIEZA - ELIMINAR REGLAS PERMISIVAS
# Principio de Seguridad: "Lo que no est√° expl√≠citamente permitido, est√° prohibido".
# ======================================================================================
echo "‚û°Ô∏è  INICIANDO TAREA 1: Eliminando la regla de firewall 'open-access'..."

# El laboratorio comienza con una regla de firewall que es como una puerta de garaje
# abierta de par en par al mundo. Nuestro primer trabajo como consultores de seguridad
# es CERRARLA. Eliminamos la amenaza antes de construir nuestras defensas.
gcloud compute firewall-rules delete open-access --quiet

echo "‚úÖ TAREA 1: Completada. La puerta principal del castillo ha sido cerrada."

# ======================================================================================
#             TAREA 2: DESPERTAR AL GUARDI√ÅN - EL HOST BASTI√ìN
# Concepto Clave: El Basti√≥n es la √öNICA puerta de entrada fortificada para
# la administraci√≥n de nuestra red. NUNCA debe tener una IP p√∫blica.
# ======================================================================================
echo "‚û°Ô∏è  INICIANDO TAREA 2: Iniciando el host basti√≥n..."

# La VM 'bastion' est√° apagada por defecto en el laboratorio. Simplemente la encendemos.
gcloud compute instances start bastion --zone=$ZONE

echo "‚úÖ TAREA 2: Completada. El guardi√°n est√° en su puesto."

# ======================================================================================
#       TAREA 3: CONSTRUYENDO LAS MURALLAS - REGLAS DE FIREWALL ESPEC√çFICAS
# Estrategia: Ahora que todo est√° cerrado, vamos a abrir tres peque√±os t√∫neles
# de acceso, muy espec√≠ficos y controlados.
# ======================================================================================
echo "‚û°Ô∏è  INICIANDO TAREA 3: Creando las reglas de firewall de privilegio m√≠nimo..."

# --- 3.1 El T√∫nel de IAP para el Basti√≥n ---
# Creamos una regla que permite SSH (puerto 22), pero ¬°ATENCI√ìN! solo desde
# el rango de IP '35.235.240.0/20'. Este rango le pertenece al servicio de IAP de Google.
# As√≠, la √∫nica forma de entrar a nuestra red desde fuera es a trav√©s de este servicio seguro.
echo "Creando regla para SSH a trav√©s de IAP (nuestro esc√°ner de retina)..."
gcloud compute firewall-rules create ssh-ingress \
    --network=acme-vpc \
    --allow=tcp:22 \
    --source-ranges=35.235.240.0/20 \
    --target-tags=$IAP_NETWORK_TAG

# Ahora, le damos el "pase de acceso" (la etiqueta) a nuestro guardi√°n, el basti√≥n.
# Solo √©l puede usar esta entrada.
gcloud compute instances add-tags bastion --tags=$IAP_NETWORK_TAG --zone=$ZONE

# --- 3.2 La Puerta Principal para Clientes (HTTP) ---
# Ahora creamos la puerta para los clientes. Permite tr√°fico HTTP (puerto 80) desde
# CUALQUIER LUGAR ('0.0.0.0/0'). ¬øPor qu√© aqu√≠ s√≠ est√° bien? Porque es un sitio web p√∫blico.
# Si no, ¬°nadie podr√≠a visitarlo!
echo "Creando regla para el tr√°fico web HTTP (la puerta de los clientes)..."
gcloud compute firewall-rules create http-ingress \
    --network=acme-vpc \
    --allow=tcp:80 \
    --source-ranges=0.0.0.0/0 \
    --target-tags=$HTTP_NETWORK_TAG

# Le damos el "pase de acceso HTTP" a nuestro servidor web, el 'juice-shop'.
gcloud compute instances add-tags juice-shop --tags=$HTTP_NETWORK_TAG --zone=$ZONE

# --- 3.3 El Pasadizo Secreto Interno (SSH Interno) ---
# Necesitamos una forma de administrar 'juice-shop'. Pero no queremos exponerlo a internet.
# As√≠ que creamos un pasadizo secreto. Esta regla permite SSH (puerto 22), pero SOLO
# desde la red interna donde vive nuestro basti√≥n ('192.168.10.0/24').
echo "Creando regla para el SSH interno (el pasadizo secreto)..."
gcloud compute firewall-rules create internal-ssh-ingress \
    --network=acme-vpc \
    --allow=tcp:22 \
    --source-ranges=192.168.10.0/24 \
    --target-tags=$INTERNAL_NETWORK_TAG

# Le damos el "pase de acceso para el pasadizo" al 'juice-shop'.
# ¬°F√≠jense que 'juice-shop' ahora tiene dos pulseras! Una para HTTP y otra para SSH interno.
gcloud compute instances add-tags juice-shop --tags=$INTERNAL_NETWORK_TAG --zone=$ZONE

echo "‚úÖ TAREA 3: Completada. Nuestras murallas y t√∫neles est√°n construidos."

# ======================================================================================
#             TAREA 4: LA PRUEBA FINAL - INFILTRARSE EN NUESTRO PROPIO FUERTE
# ======================================================================================
echo "‚û°Ô∏è  INICIANDO TAREA 4: Probando la conexi√≥n segura..."

# Este es el truco final y es pura elegancia. Le decimos a gcloud:
# 1. Con√©ctate por SSH al 'bastion' (gcloud es lo suficientemente inteligente para usar IAP).
# 2. Una vez dentro, NO me des una terminal. En su lugar, ejecuta OTRO COMANDO.
# 3. ¬øQu√© comando? "gcloud compute ssh juice-shop --internal-ip".
# Esto crea un t√∫nel dentro de otro t√∫nel, probando que todo nuestro modelo de seguridad funciona.
timeout 45 gcloud compute ssh bastion --zone=$ZONE --quiet \
    --command="gcloud compute ssh juice-shop --zone=$ZONE --internal-ip --quiet --command='echo SSH_SUCCESS'"

echo "‚úÖ TAREA 4: ¬°Conexi√≥n exitosa!"
echo "======================================================================"
echo "üöÄ ¬°LABORATORIO CONFIGURADO CON √âXITO! üöÄ"
echo "Has transformado una red vulnerable en un ejemplo de seguridad en la nube."
echo "======================================================================"